{"version":3,"file":"index.es.js","sources":["../src/index.js"],"sourcesContent":["import * as React from 'react'\nimport PropTypes from 'prop-types'\n\nconst DEFAULT_CDN_URL =\n    'https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/3.4.3/flags/4x3/'\nconst DEFAULT_CDN_SUFFIX = 'svg'\n\n// offset between uppercase ascii and regional indicator symbols\nconst OFFSET = 127397\n\nfunction ReactCountryFlag({\n    cdnSuffix,\n    cdnUrl,\n    countryCode,\n    style,\n    svg,\n    ...props\n}) {\n    if (typeof countryCode !== 'string') {\n        return null\n    }\n\n    if (svg) {\n        const flagUrl = `${cdnUrl}${countryCode.toLowerCase()}.${DEFAULT_CDN_SUFFIX}`\n\n        return (\n            <img\n                {...props}\n                src={flagUrl}\n                style={{\n                    display: 'inline-block',\n                    width: '1em',\n                    height: '1em',\n                    verticalAlign: 'middle',\n                    ...style\n                }}\n            />\n        )\n    }\n\n    const emoji = countryCode\n        .toUpperCase()\n        .replace(/./g, (char) =>\n            String.fromCodePoint(char.charCodeAt(0) + OFFSET)\n        )\n\n    return (\n        <span\n            role=\"img\"\n            {...props}\n            style={{\n                display: 'inline-block',\n                fontSize: '1em',\n                lineHeight: '1em',\n                verticalAlign: 'middle',\n                ...style\n            }}\n        >\n            {emoji}\n        </span>\n    )\n}\n\nReactCountryFlag.propTypes = {\n    cdnUrl: PropTypes.string,\n    countryCode: PropTypes.string.isRequired,\n    style: PropTypes.object,\n    svg: PropTypes.bool\n}\n\nReactCountryFlag.defaultProps = {\n    cdnUrl: DEFAULT_CDN_URL,\n    svg: false\n}\n\nexport default ReactCountryFlag\n"],"names":["DEFAULT_CDN_URL","DEFAULT_CDN_SUFFIX","OFFSET","ReactCountryFlag","cdnSuffix","cdnUrl","countryCode","style","svg","props","flagUrl","toLowerCase","display","width","height","verticalAlign","emoji","toUpperCase","replace","char","String","fromCodePoint","charCodeAt","fontSize","lineHeight","propTypes","PropTypes","string","isRequired","object","bool","defaultProps"],"mappings":";;;;;;;;;;;;;;;;AAGA,IAAMA,eAAe,GACjB,uEADJ;AAEA,IAAMC,kBAAkB,GAAG,KAA3B;;AAGA,IAAMC,MAAM,GAAG,MAAf;;AAEA,SAASC,gBAAT,OAOG;AAAA,OANCC,SAMD;AAAA,UALCC,MAKD,QALCA,MAKD;AAAA,MAJCC,WAID,QAJCA,WAID;AAAA,MAHCC,KAGD,QAHCA,KAGD;AAAA,MAFCC,GAED,QAFCA,GAED;AAAA,MADIC,KACJ;;AACC,MAAI,OAAOH,WAAP,KAAuB,QAA3B,EAAqC;AACjC,WAAO,IAAP;AACH;;AAED,MAAIE,GAAJ,EAAS;AACL,QAAME,OAAO,aAAML,MAAN,SAAeC,WAAW,CAACK,WAAZ,EAAf,cAA4CV,kBAA5C,CAAb;AAEA,wBACI,wCACQQ,KADR;AAEI,MAAA,GAAG,EAAEC,OAFT;AAGI,MAAA,KAAK;AACDE,QAAAA,OAAO,EAAE,cADR;AAEDC,QAAAA,KAAK,EAAE,KAFN;AAGDC,QAAAA,MAAM,EAAE,KAHP;AAIDC,QAAAA,aAAa,EAAE;AAJd,SAKER,KALF;AAHT,OADJ;AAaH;;AAED,MAAMS,KAAK,GAAGV,WAAW,CACpBW,WADS,GAETC,OAFS,CAED,IAFC,EAEK,UAACC,IAAD;AAAA,WACXC,MAAM,CAACC,aAAP,CAAqBF,IAAI,CAACG,UAAL,CAAgB,CAAhB,IAAqBpB,MAA1C,CADW;AAAA,GAFL,CAAd;AAMA,sBACI;AACI,IAAA,IAAI,EAAC;AADT,KAEQO,KAFR;AAGI,IAAA,KAAK;AACDG,MAAAA,OAAO,EAAE,cADR;AAEDW,MAAAA,QAAQ,EAAE,KAFT;AAGDC,MAAAA,UAAU,EAAE,KAHX;AAIDT,MAAAA,aAAa,EAAE;AAJd,OAKER,KALF;AAHT,MAWKS,KAXL,CADJ;AAeH;;AAEDb,gBAAgB,CAACsB,SAAjB,GAA6B;AACzBpB,EAAAA,MAAM,EAAEqB,SAAS,CAACC,MADO;AAEzBrB,EAAAA,WAAW,EAAEoB,SAAS,CAACC,MAAV,CAAiBC,UAFL;AAGzBrB,EAAAA,KAAK,EAAEmB,SAAS,CAACG,MAHQ;AAIzBrB,EAAAA,GAAG,EAAEkB,SAAS,CAACI;AAJU,CAA7B;AAOA3B,gBAAgB,CAAC4B,YAAjB,GAAgC;AAC5B1B,EAAAA,MAAM,EAAEL,eADoB;AAE5BQ,EAAAA,GAAG,EAAE;AAFuB,CAAhC;;;;"}