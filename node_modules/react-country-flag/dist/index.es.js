import * as React from 'react';
import PropTypes from 'prop-types';

var _excluded = ["cdnSuffix", "cdnUrl", "countryCode", "style", "svg"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var DEFAULT_CDN_URL = 'https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/3.4.3/flags/4x3/';
var DEFAULT_CDN_SUFFIX = 'svg'; // offset between uppercase ascii and regional indicator symbols

var OFFSET = 127397;

function ReactCountryFlag(_ref) {
  _ref.cdnSuffix;
      var cdnUrl = _ref.cdnUrl,
      countryCode = _ref.countryCode,
      style = _ref.style,
      svg = _ref.svg,
      props = _objectWithoutProperties(_ref, _excluded);

  if (typeof countryCode !== 'string') {
    return null;
  }

  if (svg) {
    var flagUrl = "".concat(cdnUrl).concat(countryCode.toLowerCase(), ".").concat(DEFAULT_CDN_SUFFIX);
    return /*#__PURE__*/React.createElement("img", _extends({}, props, {
      src: flagUrl,
      style: _objectSpread({
        display: 'inline-block',
        width: '1em',
        height: '1em',
        verticalAlign: 'middle'
      }, style)
    }));
  }

  var emoji = countryCode.toUpperCase().replace(/./g, function (char) {
    return String.fromCodePoint(char.charCodeAt(0) + OFFSET);
  });
  return /*#__PURE__*/React.createElement("span", _extends({
    role: "img"
  }, props, {
    style: _objectSpread({
      display: 'inline-block',
      fontSize: '1em',
      lineHeight: '1em',
      verticalAlign: 'middle'
    }, style)
  }), emoji);
}

ReactCountryFlag.propTypes = {
  cdnUrl: PropTypes.string,
  countryCode: PropTypes.string.isRequired,
  style: PropTypes.object,
  svg: PropTypes.bool
};
ReactCountryFlag.defaultProps = {
  cdnUrl: DEFAULT_CDN_URL,
  svg: false
};

export default ReactCountryFlag;
//# sourceMappingURL=index.es.js.map
